# Generated by Django 5.2.4 on 2025-09-16 12:49

import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sus', '0021_historicalsusperson_api_ban_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='historicalplayerid',
            name='notes',
            field=models.TextField(blank=True, help_text='Documentation about this Tower ID (e.g., ID change notes)', max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='playerid',
            name='notes',
            field=models.TextField(blank=True, help_text='Documentation about this Tower ID (e.g., ID change notes)', max_length=1000, null=True),
        ),
        migrations.CreateModel(
            name='HistoricalModerationRecord',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('tower_id', models.CharField(db_index=True, help_text='Tower ID being moderated (always stored regardless of verification status)', max_length=32)),
                ('moderation_type', models.CharField(choices=[('sus', 'Suspicious'), ('ban', 'Banned'), ('shun', 'Shunned (Discord)'), ('soft_ban', 'Soft Banned')], help_text='Type of moderation action', max_length=20)),
                ('source', models.CharField(choices=[('manual', 'Manual (Admin)'), ('api', 'API'), ('bot', 'Discord Bot'), ('automated', 'Automated System')], default='manual', help_text='Source of the moderation action', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('superseded', 'Superseded')], default='active', help_text='Current status of this moderation action', max_length=20)),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False)),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When this moderation was resolved', null=True)),
                ('reason', models.TextField(blank=True, help_text='Reason for this moderation action', max_length=1000, null=True)),
                ('resolution_note', models.TextField(blank=True, help_text='Note explaining the resolution', max_length=1000, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='Django admin user who created this moderation record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('known_player', models.ForeignKey(blank=True, db_constraint=False, help_text='Linked KnownPlayer (null for unverified players)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sus.knownplayer')),
                ('resolved_by', models.ForeignKey(blank=True, db_constraint=False, help_text='Django admin user who resolved this moderation record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('created_by_api_key', models.ForeignKey(blank=True, db_constraint=False, help_text='API key used to create this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sus.apikey')),
                ('created_by_discord_id', models.CharField(blank=True, help_text='Discord ID of user who created this record via bot command', max_length=20, null=True)),
                ('resolved_by_api_key', models.ForeignKey(blank=True, db_constraint=False, help_text='API key used to resolve this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sus.apikey')),
                ('resolved_by_discord_id', models.CharField(blank=True, help_text='Discord ID of user who resolved this record via bot command', max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'historical moderation record',
                'verbose_name_plural': 'historical moderation records',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ModerationRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tower_id', models.CharField(db_index=True, help_text='Tower ID being moderated (always stored regardless of verification status)', max_length=32)),
                ('moderation_type', models.CharField(choices=[('sus', 'Suspicious'), ('ban', 'Banned'), ('shun', 'Shunned (Discord)'), ('soft_ban', 'Soft Banned')], help_text='Type of moderation action', max_length=20)),
                ('source', models.CharField(choices=[('manual', 'Manual (Admin)'), ('api', 'API'), ('bot', 'Discord Bot'), ('automated', 'Automated System')], default='manual', help_text='Source of the moderation action', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('superseded', 'Superseded')], default='active', help_text='Current status of this moderation action', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When this moderation was resolved', null=True)),
                ('reason', models.TextField(blank=True, help_text='Reason for this moderation action', max_length=1000, null=True)),
                ('resolution_note', models.TextField(blank=True, help_text='Note explaining the resolution', max_length=1000, null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Django admin user who created this moderation record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_moderation_records', to=settings.AUTH_USER_MODEL)),
                ('known_player', models.ForeignKey(blank=True, help_text='Linked KnownPlayer (null for unverified players)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='moderation_records', to='sus.knownplayer')),
                ('resolved_by', models.ForeignKey(blank=True, help_text='Django admin user who resolved this moderation record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_moderation_records', to=settings.AUTH_USER_MODEL)),
                ('created_by_api_key', models.ForeignKey(blank=True, help_text='API key used to create this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_moderation_records', to='sus.apikey')),
                ('created_by_discord_id', models.CharField(blank=True, help_text='Discord ID of user who created this record via bot command', max_length=20, null=True)),
                ('resolved_by_api_key', models.ForeignKey(blank=True, help_text='API key used to resolve this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_moderation_records', to='sus.apikey')),
                ('resolved_by_discord_id', models.CharField(blank=True, help_text='Discord ID of user who resolved this record via bot command', max_length=20, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['tower_id', 'status'], name='sus_moderat_tower_i_a6ef91_idx'), models.Index(fields=['tower_id', 'moderation_type', 'status'], name='sus_moderat_tower_i_853806_idx'), models.Index(fields=['known_player', 'status'], name='sus_moderat_known_p_ef5eeb_idx'), models.Index(fields=['source', 'moderation_type'], name='sus_moderat_source_edc90e_idx'), models.Index(fields=['created_at'], name='sus_moderat_created_2b2618_idx')],
            },
        ),
    ]
